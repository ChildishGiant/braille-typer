{"mappings":"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","sources":["./node_modules/br6/lib/symbols.js","./node_modules/br6/lib/map.json","./node_modules/br6/lib/index.js","./node_modules/br6/lib/toBraille.js","./node_modules/br6/lib/toAlphabet.js","./node_modules/br6/lib/ascii.js","./src/main.js"],"sourcesContent":["const MAP = require('./map.json');\n\nconst isBraille = (x) => /^[\\u2800-\\u28FF]$/.test(x);\n\nfunction toBraille(str, sections) {\n  if (!sections) { // search in all sections\n    sections = Object.keys(MAP);\n  }\n\n  for (const section of sections) {\n    if (str in MAP[section]) {\n      return MAP[section][str];\n    }\n  }\n\n  return str;\n}\n\nfunction toAlphabet(str, sections) {\n  if (!sections) { // search in all sections\n    sections = Object.keys(MAP);\n  }\n\n  for (const section of sections) {\n    for (const key in MAP[section]) {\n      if (str === MAP[section][key]) {\n        return key;\n      }\n    }\n  }\n\n  return str;\n}\n\nmodule.exports = {\n  MAP,\n  isBraille,\n  toBraille,\n  toAlphabet,\n}\n","{\n  \"alpha\" : {\n    \"a\" : \"⠁\",\n    \"b\" : \"⠃\",\n    \"c\" : \"⠉\",\n    \"d\" : \"⠙\",\n    \"e\" : \"⠑\",\n    \"f\" : \"⠋\",\n    \"g\" : \"⠛\",\n    \"h\" : \"⠓\",\n    \"i\" : \"⠊\",\n    \"j\" : \"⠚\",\n    \"k\" : \"⠅\",\n    \"l\" : \"⠇\",\n    \"m\" : \"⠍\",\n    \"n\" : \"⠝\",\n    \"o\" : \"⠕\",\n    \"p\" : \"⠏\",\n    \"q\" : \"⠟\",\n    \"r\" : \"⠗\",\n    \"s\" : \"⠎\",\n    \"t\" : \"⠞\",\n    \"u\" : \"⠥\",\n    \"v\" : \"⠧\",\n    \"w\" : \"⠺\",\n    \"x\" : \"⠭\",\n    \"y\" : \"⠽\",\n    \"z\" : \"⠵\"\n  },\n\n  \"number\" : {\n    \"1\" : \"⠁\",\n    \"2\" : \"⠃\",\n    \"3\" : \"⠉\",\n    \"4\" : \"⠙\",\n    \"5\" : \"⠑\",\n    \"6\" : \"⠋\",\n    \"7\" : \"⠛\",\n    \"8\" : \"⠓\",\n    \"9\" : \"⠊\",\n    \"0\" : \"⠚\"\n  },\n\n  \"punctuation\" : {\n    \" \" : \"⠀\",\n    \",\" : \"⠂\",\n    \".\" : \"⠲\",\n    \":\" : \"⠒\",\n    \";\" : \"⠆\",\n    \"!\" : \"⠖\",\n    \"-\" : \"⠤\",\n    \"“\" : \"⠦\",\n    \"”\" : \"⠴\"\n  },\n\n  \"indicator\" : {\n    \"capital\" : \"⠠\",\n    \"numeric\" : \"⠼\"\n  }\n\n}\n","module.exports = {\n  toBrailleText: require('./toBraille'),\n  toAlphabetText: require('./toAlphabet'),\n  ascii: require('./ascii'),\n}\n","const {isBraille, toBraille, MAP} = require('./symbols');\n\n/**\n * Convert English text to UEB\n * \n * @param {string} str - Text in English alphabet\n * @returns {string}\n */\nfunction toBrailleText(str) {\n  const normalized = normalize(str);\n  const step1 = doNumerals(normalized);\n  const step2 = doCapitals(step1);\n  const step3 = doCharacters(step2);\n  return step3;\n}\n\n/**\n * Normalize the string by turning dumb quotes to smart ones\n *   and replacing unsupported characters.\n * \n * @param {string} str\n * @returns {string}\n */\nfunction normalize(str = '') {\n  const rUnsupported = /[^a-z\\d\\s!.,:;“”-]/ig;\n  return doQuotes(str).replace(/\\s/g, ' ').trim().replace(rUnsupported, '-');\n}\n\n/**\n * UEB uses curly quotation marks, straight ones need to be replaced.\n * @example\n * doQuotes(`\"Amazing!\" he said, \"now, let's go...\"`)\n * // `“Amazing!” he said, “now, let's go...”`\n * \n * @param {string} str\n * @returns {string}\n */\nfunction doQuotes(str) {\n  return str\n    .replace(/(\\s)\"/g, '$1\\u201c') // OPEN after whitespace\n    .replace(/(\\()\"/g, '$1\\u201c') // OPEN after parens\n    .replace(/(.)\"/g, '$1\\u201d') // CLOSE after any character\n    .replace(/\"/g, '\\u201c'); // OPEN the remaining\n}\n\n/**\n * Insert NUMERIC indicators and convert numbers to Braille symboles\n * \n * @example\n * doNumerals(\"it feels like 666!\") === \"it feels like ⠼⠋⠋⠋!\"\n * @param {string} str\n * @returns {string}\n */\nfunction doNumerals(str) {\n  // matches the following: \"2018\" \"3.14\" \"2,381,741\"\n  const rNumber = /[0-9]+[,0-9]*(\\.[0-9]+)?/g;\n  return str.replace(rNumber, (m) => {\n    return MAP.indicator.numeric +\n      m.split('').map(c => toBraille(c, ['number', 'punctuation'])).join('');\n  });\n}\n\n/**\n * Insert CAPITAL indicators and terminators then lowercase everything\n *\n * - \"ALICE IN WONDERLAND is a novel by Lewis CARROLL\"\n * - \"⠠⠠⠠alice in wonderland⠠⠄ is a novel by Lewis CARROLL\"\n * - \"⠠⠠⠠alice in wonderland⠠⠄ is a novel by Lewis ⠠⠠carroll\"\n * - \"⠠⠠⠠alice in wonderland⠠⠄ is a novel by ⠠lewis ⠠⠠carroll\"\n * \n * @param {string} str\n * @returns {string}\n */\nfunction doCapitals(str) {\n  // Regexes to match capitalized passages, words, and single letters\n  const rCapPassage = /[A-Z]+(\\s+[A-Z]+)+/g;\n  const rCapWord = /\\b[A-Z]{2,}\\b/g;\n  const rCapLetter = /[A-Z]/g;\n\n  return str\n    .replace(rCapPassage, m => `⠠⠠⠠${m.toLowerCase()}⠠⠄`)\n    .replace(rCapWord, m => `⠠⠠${m.toLowerCase()}`)\n    .replace(rCapLetter, m => `⠠${m.toLowerCase()}`);\n}\n\nfunction doCharacters(str) {\n  return str.split('')\n    .map(c => isBraille(c) ? c : toBraille(c, ['alpha', 'punctuation'])).join('');\n}\n\nmodule.exports = toBrailleText;\n","const {toAlphabet} = require('./symbols');\n\n/**\n * Translate Braille back to English alphabet.\n * \n * @param {string} str\n * @returns {string}\n */\nfunction toAlphabetText(str = '') {\n  const step1 = undoNumerals(str);\n  const step2 = undoCharacters(step1);\n  const step3 = undoCapitals(step2);\n  // Convert the remaining Braille symbols to '?'\n  const step4 = step3.replace(/[\\u2800-\\u28FF]/g, '?');\n  return step4;\n}\n\n/**\n * Convert Braille numbers to \"alphabet\" numbers\n * @example\n * undoNumerals(\"it feels like ⠼⠋⠋⠋!\") === \"it feels like 666!\"\n * \n * @todo Handle '.' and ','\n * @todo It's repetitive, simplify it\n * \n * @param {string} str\n * @returns {string}\n */\nfunction undoNumerals(str) {\n  const rNumber = /⠼[⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠂⠲]+/g;\n\n  return str.replace(rNumber, (m) => {\n    // remove the NUMERIC indicator then translate\n    return m.slice(1).split('').map(c => toAlphabet(c, ['number'])).join('')\n  });\n}\n\n/**\n * Remove CAPITAL indicators and uppercase parts of text\n *\n * - \"⠠⠠⠠alice in wonderland⠠⠄ is a novel by ⠠lewis ⠠⠠carroll\"\n * - \"ALICE IN WONDERLAND is a novel by ⠠lewis ⠠⠠carroll\"\n * - \"ALICE IN WONDERLAND is a novel by ⠠lewis CARROLL\"\n * - \"ALICE IN WONDERLAND is a novel by Lewis CARROLL\"\n * \n * @param {string} str\n * @returns {string}\n */\nfunction undoCapitals(str) {\n  // regexes to matche capitalized passages, words, letters\n  const rCapPassage = /⠠⠠⠠[\\w\\W]+?⠠⠄/g;\n  const rCapWord = /⠠⠠[a-z]+/g;\n  const rCapLetter = /⠠[a-z]/g;\n\n  return str\n    .replace(rCapPassage, m => m.slice(3, -2).toUpperCase())\n    .replace(rCapWord, m => m.slice(2).toUpperCase())\n    .replace(rCapLetter, m => m.slice(1).toUpperCase());\n}\n\nfunction undoCharacters(str) {\n  return str.split('').map(c => toAlphabet(c, ['alpha', 'punctuation'])).join('');\n}\n\nmodule.exports = toAlphabetText;\n","// ASCII Utilities\n\n// I found these two string literals on Wikipedia\nconst BR6_ASCII_STRING_LITERAL =\n' A1B\\'K2L@CIF/MSP\"E3H9O6R^DJG>NTQ,*5<-U8V.%[$+X!&;:4\\\\0Z7(_?W]#Y)=';\nconst BR6_UNICODE_STRING_LITERAL =\n'⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿';\n\n/**\n * @example\n * getDotsArray('⠗'); // [1, 1, 1, 0, 1, 0]\n * \n * @param {string} b - Braille character\n * @returns {Array<number>}\n */\nfunction getDotsArray(b) {\n  const arr = [0, 0, 0, 0, 0, 0];\n  let val = BR6_UNICODE_STRING_LITERAL.indexOf(b);\n  let i = 0;\n  while (val !== 0) {\n    arr[i] = val % 2;\n    val = Math.floor(val / 2);\n    i++;\n  }\n  return arr;\n}\n\n\n/**\n * @example\n * simBr6Char(getDotsArray('⠗') === [\n *   '* '\n *   '**'\n *   '* '].join('');\n * \n * @param {Array<number>} dots - as outputed by getDotsArray\n * @returns {string}\n */\nfunction simBr6Char(dots) {\n  if (dots.length !== 6) {\n    throw new Error('The \"dots\" array must be of length 6'); \n  }\n\n  let str = [\n    '14',\n    '25',\n    '36'].join('\\n');\n  for (let i = 0; i < 6; i++) {\n    str = str.replace(i+1, arr[i] ? '*' : ' ');\n  }\n\n  return str;\n}\n\nmodule.exports = {\n  getDotsArray,\n  simBr6Char,\n}\n","const { toAlphabetText } = require('br6')\r\n\r\nconst dots = {\r\n  0: '⠀',\r\n  1: '⠁',\r\n  3: '⠂',\r\n  13: '⠃',\r\n  5: '⠄',\r\n  15: '⠅',\r\n  35: '⠆',\r\n  135: '⠇',\r\n  2: '⠈',\r\n  12: '⠉',\r\n  23: '⠊',\r\n  123: '⠋',\r\n  25: '⠌',\r\n  125: '⠍',\r\n  235: '⠎',\r\n  1235: '⠏',\r\n  4: '⠐',\r\n  14: '⠑',\r\n  34: '⠒',\r\n  134: '⠓',\r\n  45: '⠔',\r\n  145: '⠕',\r\n  345: '⠖',\r\n  1345: '⠗',\r\n  24: '⠘',\r\n  124: '⠙',\r\n  234: '⠚',\r\n  1234: '⠛',\r\n  245: '⠜',\r\n  1245: '⠝',\r\n  2345: '⠞',\r\n  12345: '⠟',\r\n  6: '⠠',\r\n  16: '⠡',\r\n  36: '⠢',\r\n  136: '⠣',\r\n  56: '⠤',\r\n  156: '⠥',\r\n  356: '⠦',\r\n  1356: '⠧',\r\n  26: '⠨',\r\n  126: '⠩',\r\n  236: '⠪',\r\n  1236: '⠫',\r\n  256: '⠬',\r\n  1256: '⠭',\r\n  2356: '⠮',\r\n  12356: '⠯',\r\n  46: '⠰',\r\n  146: '⠱',\r\n  346: '⠲',\r\n  1346: '⠳',\r\n  456: '⠴',\r\n  1456: '⠵',\r\n  3456: '⠶',\r\n  13456: '⠷',\r\n  246: '⠸',\r\n  1246: '⠹',\r\n  2346: '⠺',\r\n  12346: '⠻',\r\n  2456: '⠼',\r\n  12456: '⠽',\r\n  23456: '⠾',\r\n  123456: '⠿'\r\n}\r\n\r\nwindow.submit = function () {\r\n  let s = ''\r\n\r\n  document.querySelectorAll('.toggle').forEach(input => {\r\n    if (input.classList.contains('checked')) {\r\n      s += input.id\r\n    }\r\n  })\r\n\r\n  document.getElementById('out').value += dots[Number(s)]\r\n\r\n  document.getElementById('translated').value = toAlphabetText(document.getElementById('out').value)\r\n}\r\n"],"names":["$1d283c7660361e381616343746b0e6ea$var$MAP","JSON","parse","MAP","isBraille","x","test","toBraille","str","sections","Object","keys","section","toAlphabet","key","toBrailleText","split","map","c","join","$f5fc380c07f0574857f5ea9d846d2dac$var$doCharacters","rCapPassage","rCapWord","rCapLetter","replace","m","toLowerCase","$f5fc380c07f0574857f5ea9d846d2dac$var$doCapitals","rNumber","indicator","numeric","$f5fc380c07f0574857f5ea9d846d2dac$var$doNumerals","rUnsupported","$f5fc380c07f0574857f5ea9d846d2dac$var$doQuotes","trim","$f5fc380c07f0574857f5ea9d846d2dac$var$normalize","toAlphabetText","slice","toUpperCase","$c294926ae20708221325432925884373$var$undoCapitals","$c294926ae20708221325432925884373$var$undoCharacters","$c294926ae20708221325432925884373$var$undoNumerals","ascii","getDotsArray","b","arr","val","indexOf","i","Math","floor","simBr6Char","dots","length","Error","$16b5ad875ae907e2f7f79e7b8fe116cc$var$dots","0","1","3","13","5","15","35","135","2","12","23","123","25","125","235","1235","4","14","34","134","45","145","345","1345","24","124","234","1234","245","1245","2345","12345","6","16","36","136","56","156","356","1356","26","126","236","1236","256","1256","2356","12356","46","146","346","1346","456","1456","3456","13456","246","1246","2346","12346","2456","12456","23456","123456","window","submit","s","document","querySelectorAll","forEach","input","classList","contains","id","getElementById","value","Number"],"version":3,"file":"index.fe7b092f.js.map"}